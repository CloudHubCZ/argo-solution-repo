---
# Source: sales-chart/templates/networkPolicy-access-to-backend.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  namespace: sales-test
  name: restrict-access-to-backend
spec:
  podSelector:
    matchLabels:
      app: backend
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: backend
        - podSelector:
            matchLabels:
              app: frontend
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: backend
    - to:
        - podSelector:
            matchLabels:
              app: persistence
---
# Source: sales-chart/templates/networkPolicy-access-to-frontend.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  namespace: sales-test
  name: restrict-access-to-frontend
spec:
  podSelector:
    matchLabels:
      app: frontend
  policyTypes:
    - Egress
    - Ingress
  ingress:
    - {}
  egress:
    - {}
---
# Source: sales-chart/templates/networkPolicy-access-to-persistence.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  namespace: sales-test
  name: restrict-access-to-persistence
spec:
  podSelector:
    matchLabels:
      app: persistence
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: backend
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: backend
---
# Source: sales-chart/templates/networkPolicy-deny-all.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: default-deny
  namespace: sales-test
spec:
  podSelector:
    matchLabels: {}
  policyTypes:
    - Ingress
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
---
# Source: sales-chart/templates/networkPolicy-deny-from-other-namespace.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  namespace: sales-test
  name: deny-from-other-namespaces
spec:
  podSelector:
    matchLabels: {}
  ingress:
  - from:
    - podSelector: {}
---
# Source: sales-chart/templates/configMap-backend.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-cm
  namespace: sales-test
  labels:
    app: backend
data:
  COMMUNICATION_INITIATE_ENABLED: "false"
  COMMUNICATION_INITIATE_TARGET_URL: ""
  COMMUNICATION_FORWARD_ENABLED: "true"
  COMMUNICATION_FORWARD_TARGET_URL: "http://persistence-service:8080"
---
# Source: sales-chart/templates/configMap-frontend.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-cm
  namespace: sales-test
  labels:
    app: frontend
data:
  COMMUNICATION_INITIATE_ENABLED: "true"
  COMMUNICATION_INITIATE_TARGET_URL: "http://backend-service:8080"
  COMMUNICATION_FORWARD_ENABLED: "false"
  COMMUNICATION_FORWARD_TARGET_URL: ""
  APP_ENVIRONMENT: "test"
  GREETINGS: "hi dude"
---
# Source: sales-chart/templates/configMap-persistence.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: persistence-cm
  namespace: sales-test
  labels:
    app: persistence
data:
  COMMUNICATION_INITIATE_ENABLED: "false"
  COMMUNICATION_INITIATE_TARGET_URL: ""
  COMMUNICATION_FORWARD_ENABLED: "false"
  COMMUNICATION_FORWARD_TARGET_URL: ""
---
# Source: sales-chart/templates/service-backend.yaml
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: sales-test
  labels:
    app: backend
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: backend
---
# Source: sales-chart/templates/service-frontend.yaml
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: sales-test
  labels:
    app: frontend
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: frontend
---
# Source: sales-chart/templates/service-persistence.yaml
apiVersion: v1
kind: Service
metadata:
  name: persistence-service
  namespace: sales-test
  labels:
    app: persistence
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app: persistence
---
# Source: sales-chart/templates/deployment-backend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: sales-test
  labels:
    app: backend
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      annotations:
        checksum/config: 496275209ba87f74504b6ff7bf62012973c8d0fbb57c5a9ea65ea5d226bbe249
      labels:
        app: backend
    spec:
      containers:
        - name: testapp
          image: "davidmachacek/testapp:1.0.8"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          envFrom:
            - configMapRef:
                name: backend-cm
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            periodSeconds: 5
            initialDelaySeconds: 20
            failureThreshold: 2
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            periodSeconds: 5
            initialDelaySeconds: 20
            failureThreshold: 1
            timeoutSeconds: 2
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            failureThreshold: 25
            periodSeconds: 10
            initialDelaySeconds: 20
            timeoutSeconds: 2
          resources:
            requests:
              memory: "64Mi"
              cpu: "20m"
            limits:
              memory: "512Mi"
              cpu: "250m"
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: ScheduleAnyway
              labelSelector:
                matchLabels:
                  app: backend
---
# Source: sales-chart/templates/deployment-frontend.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: sales-test
  labels:
    app: frontend
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      annotations:
        checksum/config: 82811e142908618ff62cfb485eca4ac98047b0d6e8d513755498dba3e89a78fc
      labels:
        app: frontend
    spec:
      containers:
        - name: testapp
          image: "davidmachacek/testapp:1.0.8"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          envFrom:
            - configMapRef:
                name: frontend-cm
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            periodSeconds: 5
            initialDelaySeconds: 40
            failureThreshold: 2
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            periodSeconds: 5
            initialDelaySeconds: 40
            failureThreshold: 1
            timeoutSeconds: 2
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            failureThreshold: 25
            periodSeconds: 10
            initialDelaySeconds: 60
            timeoutSeconds: 2
          resources:
            requests:
              memory: "64Mi"
              cpu: "20m"
            limits:
              memory: "512Mi"
              cpu: "250m"
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: ScheduleAnyway
              labelSelector:
                matchLabels:
                  app: frontend
---
# Source: sales-chart/templates/deployment-persistence.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: persistence-deployment
  namespace: sales-test
  labels:
    app: persistence
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: persistence
  template:
    metadata:
      annotations:
        checksum/config: 0745f4c3d0e360b001db5c1e3b357b1abe5d70cd4e9191e25590c88a565323a4
      labels:
        app: persistence
    spec:
      containers:
        - name: testapp
          image: "davidmachacek/testapp:1.0.8"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          envFrom:
            - configMapRef:
                name: persistence-cm
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            periodSeconds: 5
            initialDelaySeconds: 40
            failureThreshold: 2
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            periodSeconds: 5
            initialDelaySeconds: 40
            failureThreshold: 1
            timeoutSeconds: 2
          startupProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            failureThreshold: 25
            periodSeconds: 10
            initialDelaySeconds: 60
            timeoutSeconds: 2
          resources:
            requests:
              memory: "64Mi"
              cpu: "20m"
            limits:
              memory: "512Mi"
              cpu: "250m"
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: ScheduleAnyway
              labelSelector:
                matchLabels:
                  app: persistence
---
# Source: sales-chart/templates/ingress-frontend.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
  name: backend-ingress
  namespace: sales-test
spec:
  ingressClassName: nginx
  rules:
    - host: frontend-test.cloudhub.cz
      http:
        paths:
          - backend:
              service:
                name: frontend-service
                port:
                  name: http
            path: /
            pathType: Prefix
---
# Source: sales-chart/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "sales-test-sales-chart-test-connection"
  labels:
    helm.sh/chart: sales-chart-0.1.0
    app.kubernetes.io/name: sales-chart
    app.kubernetes.io/instance: sales-test
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['sales-test-sales-chart:8080']
  restartPolicy: Never
